// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || 'https://placeholder.supabase.co';
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY || 'placeholder-key';

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a robust Supabase client that handles both build-time and runtime
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

const getSupabaseClient = () => {
  if (!supabaseInstance) {
    // Only create client if we have valid credentials
    if (SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY && 
        SUPABASE_URL !== 'https://placeholder.supabase.co' && 
        SUPABASE_PUBLISHABLE_KEY !== 'placeholder-key') {
      
      supabaseInstance = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
        auth: {
          storage: typeof window !== 'undefined' ? window.localStorage : undefined,
          persistSession: typeof window !== 'undefined',
          autoRefreshToken: typeof window !== 'undefined',
        }
      });
    } else {
      // Return a mock client for development/testing
      console.warn('Supabase credentials not found, using mock client');
      supabaseInstance = {
        auth: {
          getUser: () => Promise.resolve({ data: { user: null }, error: null }),
          getSession: () => Promise.resolve({ data: { session: null }, error: null }),
          onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
          signOut: () => Promise.resolve({ error: null }),
          signUp: () => Promise.resolve({ error: null }),
          signInWithPassword: () => Promise.resolve({ error: null }),
        },
        from: () => ({
          select: () => ({
            eq: () => ({
              maybeSingle: () => Promise.resolve({ data: null, error: null }),
              single: () => Promise.resolve({ data: null, error: null }),
            }),
            order: () => Promise.resolve({ data: [], error: null }),
            in: () => Promise.resolve({ data: [], error: null }),
          }),
          insert: () => Promise.resolve({ data: null, error: null }),
          update: () => Promise.resolve({ data: null, error: null }),
          delete: () => Promise.resolve({ data: null, error: null }),
        }),
        functions: {
          invoke: async (functionName: string, options?: any) => {
            console.warn(`Mock Supabase function call: ${functionName}`);
            // Return a mock response for plant identification
            if (functionName === 'identify-plant') {
              return {
                data: {
                  plantName: "Sample Plant",
                  scientificName: "Plantus sampleus",
                  plantType: "Houseplant",
                  family: "Plantaceae",
                  origin: "Tropical regions",
                  suitableEnvironment: "Bright indirect light, warm temperatures, high humidity",
                  careInstructions: "Water when soil is dry, fertilize monthly during growing season",
                  growthHabit: "Upright, bushy growth reaching 2-3 feet tall",
                  floweringSeason: "Spring to summer",
                  toxicity: "Non-toxic to humans and pets",
                  uses: "Ornamental houseplant, air purification",
                  propagation: "Stem cuttings in water or soil",
                  commonProblems: "Overwatering, spider mites, leaf drop",
                  confidence: 85
                },
                error: null
              };
            }
            if (functionName === 'diagnose-disease') {
              return {
                data: {
                  diseaseName: "Sample Disease",
                  severity: "mild",
                  symptoms: "Yellowing leaves, brown spots",
                  treatment: "Remove affected leaves, improve air circulation",
                  prevention: "Avoid overwatering, ensure proper drainage",
                  confidence: 75
                },
                error: null
              };
            }
            return {
              data: null,
              error: { message: "Mock Supabase function - please configure real Supabase credentials" }
            };
          }
        },
        channel: () => ({
          on: () => ({ subscribe: () => ({ unsubscribe: () => {} }) }),
        }),
        removeChannel: () => {},
      } as any;
    }
  }
  return supabaseInstance;
};

export const supabase = new Proxy({} as ReturnType<typeof createClient<Database>>, {
  get(target, prop) {
    const client = getSupabaseClient();
    return client ? client[prop as keyof typeof client] : undefined;
  }
});